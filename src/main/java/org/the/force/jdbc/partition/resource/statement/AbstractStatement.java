package org.the.force.jdbc.partition.resource.statement;

import org.the.force.jdbc.partition.exception.UnsupportedSqlOperatorException;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

/**
 * Created by xuji on 2017/5/28.
 */
public class AbstractStatement implements Statement {


    public ResultSet executeQuery(String sql) throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }

    public int executeUpdate(String sql) throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }

    public void close() throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }

    public int getMaxFieldSize() throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }

    public void setMaxFieldSize(int max) throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }

    public int getMaxRows() throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }

    public void setMaxRows(int max) throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }

    public void setEscapeProcessing(boolean enable) throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }

    public int getQueryTimeout() throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }

    public void setQueryTimeout(int seconds) throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }

    public void cancel() throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }

    public SQLWarning getWarnings() throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }


    public void clearWarnings() throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }


    public void setCursorName(String name) throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }


    public boolean execute(String sql) throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }


    public ResultSet getResultSet() throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }


    public int getUpdateCount() throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }


    public boolean getMoreResults() throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }


    public void setFetchDirection(int direction) throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }


    public int getFetchDirection() throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }


    public void setFetchSize(int rows) throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }


    public int getFetchSize() throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }


    public int getResultSetConcurrency() throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }


    public int getResultSetType() throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }


    public void addBatch(String sql) throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }


    public void clearBatch() throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }


    public int[] executeBatch() throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }


    public Connection getConnection() throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }


    public boolean getMoreResults(int current) throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }


    public ResultSet getGeneratedKeys() throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }


    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }


    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }


    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }


    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }


    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }


    public boolean execute(String sql, String[] columnNames) throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }


    public int getResultSetHoldability() throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }


    public boolean isClosed() throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }


    public void setPoolable(boolean poolable) throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }


    public boolean isPoolable() throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }


    public void closeOnCompletion() throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }


    public boolean isCloseOnCompletion() throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }


    public long getLargeUpdateCount() throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }


    public void setLargeMaxRows(long max) throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }


    public long getLargeMaxRows() throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }


    public long[] executeLargeBatch() throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }


    public long executeLargeUpdate(String sql) throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }


    public long executeLargeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }


    public long executeLargeUpdate(String sql, int[] columnIndexes) throws SQLException {
        throw new UnsupportedSqlOperatorException();
    }

    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return iface.isAssignableFrom(this.getClass());
    }

    public <T> T unwrap(Class<T> iface) throws SQLException {
        try {
            return (T) this;
        } catch (Exception e) {
            throw new SQLException(e);
        }
    }
}
